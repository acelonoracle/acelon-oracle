import { encodeAbiParameters, decodeAbiParameters, Hex } from 'viem'

// The price data object
const priceData = {
  from: 'BTC',
  to: 'USDT',
  decimals: 8,
  price: [BigInt(6373719500000)],
  timestamp: 1727711003369,
  sources: [
    {
      exchangeId: 'BNU',
      certificate:
        'ef27778d3c1f3546d7c49fe18aa7c2559a11171df720b9b4230dc2758bb2603e',
    },
    {
      exchangeId: 'BNC',
      certificate:
        '4795062d13e1ed971c6b6e5699764681e4d090bad39a7ef367cc9cb705652384',
    },
    {
      exchangeId: 'CBP',
      certificate:
        '31257bd5a35d7b4a753f46248c77f4018d7c4192587899ad588ed13529d49484',
    },
    {
      exchangeId: 'BFX',
      certificate:
        '9f828f8e197e0cd081a38be3f5ac5ed91e50a6a676ac2a818ca81c3d0d1aeddd',
    },
    {
      exchangeId: 'KRK',
      certificate:
        'b9b254d396ed5fda09cd28b30e340d5d0af74027ade9c100a23dd2bb1662407b',
    },
    {
      exchangeId: 'BYB',
      certificate:
        'f48b930f6a5dbad1072bef0d81658ca67019069ed04d2d2feccef4ec90cdf998',
    },
    {
      exchangeId: 'KUC',
      certificate:
        '875f2ab6d013049784ebdca33e5182d8885d81fa9d01ceb44f94175c44a824c1',
    },
    {
      exchangeId: 'GIO',
      certificate:
        '7f09db6060e6ab8c7cc96eda8cd93cf629c619e3c522dadc61130530a3681140',
    },
    {
      exchangeId: 'CRY',
      certificate:
        'e949e682ce8ecc2e438b0118f7705377c1297e7a680d352ad98dc2f8d05e1571',
    },
    {
      exchangeId: 'HTX',
      certificate:
        '74741668a181b5567f47b82d8a4cd718bd46ae53cd094e049a00cf67db0ae794',
    },
    {
      exchangeId: 'MEXC',
      certificate:
        'ff3d152df65fe4b4188e59797e58d0f2c5cf40d7e2eb1dbd48f1dcd97a182550',
    },
    {
      exchangeId: 'OKX',
      certificate:
        'd76729dc646f89f9cf0c4e90d0cc6d9acbd0874304b518da65698edb6d6be65d',
    },
  ],
  requestHash:
    'c55623dc6bf3806a9e3e11ba957aa37335e154d37dacc702a9ac09f243e7bc8a',
}

// Define the ABI parameters
const abiParameters = [
  {
    name: 'priceData',
    type: 'tuple',
    components: [
      { name: 'from', type: 'string' },
      { name: 'to', type: 'string' },
      { name: 'decimals', type: 'uint8' },
      { name: 'price', type: 'uint128[]' },
      { name: 'timestamp', type: 'uint64' },
      {
        name: 'sources',
        type: 'tuple[]',
        components: [
          { name: 'exchangeId', type: 'string' },
          { name: 'certificate', type: 'bytes32' },
        ],
      },
      { name: 'requestHash', type: 'bytes32' },
    ],
  },
]

// Encode the data
const abiEncoded = encodeAbiParameters(abiParameters, [
  {
    from: priceData.from,
    to: priceData.to,
    decimals: priceData.decimals,
    price: priceData.price,
    timestamp: priceData.timestamp,
    sources: priceData.sources.map((source) => ({
      exchangeId: source.exchangeId,
      certificate: `0x${source.certificate}` as `0x${string}`,
    })),
    requestHash: `0x${priceData.requestHash}` as `0x${string}`,
  },
])

console.log('Encoded Data:', abiEncoded)

// Decode the data
// const decodedData = decodeAbiParameters(abiParameters, abiEncoded)
const decodedData = decodeAbiParameters(
  abiParameters,
  `0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000019243a9405400000000000000000000000000000000000000000000000000000000000001a0c55623dc6bf3806a9e3e11ba957aa37335e154d37dacc702a9ac09f243e7bc8a00000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000455534454000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000005c7d14b3e00000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000001a0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000000000000052000000000000000000000000000000000000000000000000000000000000005a0000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000006a0000000000000000000000000000000000000000000000000000000000000072000000000000000000000000000000000000000000000000000000000000007a00000000000000000000000000000000000000000000000000000000000000040ef27778d3c1f3546d7c49fe18aa7c2559a11171df720b9b4230dc2758bb2603e0000000000000000000000000000000000000000000000000000000000000003424e55000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000404795062d13e1ed971c6b6e5699764681e4d090bad39a7ef367cc9cb7056523840000000000000000000000000000000000000000000000000000000000000003424e430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004031257bd5a35d7b4a753f46248c77f4018d7c4192587899ad588ed13529d494840000000000000000000000000000000000000000000000000000000000000003434250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000409f828f8e197e0cd081a38be3f5ac5ed91e50a6a676ac2a818ca81c3d0d1aeddd000000000000000000000000000000000000000000000000000000000000000342465800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040b9b254d396ed5fda09cd28b30e340d5d0af74027ade9c100a23dd2bb1662407b00000000000000000000000000000000000000000000000000000000000000034b524b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f48b930f6a5dbad1072bef0d81658ca67019069ed04d2d2feccef4ec90cdf998000000000000000000000000000000000000000000000000000000000000000342594200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040875f2ab6d013049784ebdca33e5182d8885d81fa9d01ceb44f94175c44a824c100000000000000000000000000000000000000000000000000000000000000034b5543000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000407f09db6060e6ab8c7cc96eda8cd93cf629c619e3c522dadc61130530a3681140000000000000000000000000000000000000000000000000000000000000000347494f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040e949e682ce8ecc2e438b0118f7705377c1297e7a680d352ad98dc2f8d05e157100000000000000000000000000000000000000000000000000000000000000034352590000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004074741668a181b5567f47b82d8a4cd718bd46ae53cd094e049a00cf67db0ae794000000000000000000000000000000000000000000000000000000000000000348545800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040ff3d152df65fe4b4188e59797e58d0f2c5cf40d7e2eb1dbd48f1dcd97a18255000000000000000000000000000000000000000000000000000000000000000044d455843000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040d76729dc646f89f9cf0c4e90d0cc6d9acbd0874304b518da65698edb6d6be65d00000000000000000000000000000000000000000000000000000000000000034f4b5800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040f1ca8aad635603e5ab31f9d0016102d554f931ff886eb5fce609b46035431a0400000000000000000000000000000000000000000000000000000000000000035550420000000000000000000000000000000000000000000000000000000000`
)

console.log('Decoded Data:', decodedData)

// Test if the decoded data matches the original data
const testDecoding = (): void => {
  // console.log('Testing decoded data:')
  // console.log('From:', decodedData[0] === priceData.from)
  // console.log('To:', decodedData[1] === priceData.to)
  // console.log('Decimals:', decodedData[2] === priceData.decimals)
  // console.log('Price:', decodedData[3][0] === priceData.price[0])
  // console.log('Timestamp:', decodedData[4] === priceData.timestamp)
  // console.log(
  //   'Sources length:',
  //   decodedData[5].length === priceData.sources.length
  // )
  // console.log('Request Hash:', decodedData[6] === priceData.requestHash)
}

testDecoding()
